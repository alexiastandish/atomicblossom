datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    name           String?
    email          String?   @unique
    emailVerified  DateTime?
    image          String?
    hashedPassword String?
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    role           Role      @default(USER)

    accounts Account[]
    orders   Order[]
    // reviews  Review[]
}

model Product {
    id          String      @id @default(auto()) @map("_id") @db.ObjectId
    name        String?
    description String?
    price       Float
    collection  String
    inStock     Boolean
    discount    Float
    data        ProductData
}

type ProductData {
    length     Float?
    metal      String?
    chainColor String?
    width      Float?
    height     Float?
}

model Order {
    id              String            @id @default(auto()) @map("_id") @db.ObjectId
    userId          String            @db.ObjectId
    amount          Float
    currency        String
    status          String
    deliveryStatus  String?
    createDate      DateTime          @default(now())
    paymentIntentId String            @unique
    products        CartProductType[]
    address         Address?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model DndForm {
    id                String              @id @default(auto()) @map("_id") @db.ObjectId
    userId            String              @db.ObjectId
    createDate        DateTime            @default(now())
    submitted         Boolean             @default(false)
    name              String
    content           String              @default("[]")
    shareURL          String              @default(uuid())
    DndFormSubmission DndFormSubmission[]
}

model DndFormSubmission {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    userId     String   @db.ObjectId
    formId     String   @db.ObjectId
    createDate DateTime @default(now())
    form       DndForm  @relation(fields: [formId], references: [id])
    content    String
}

type CartProductType {
    id          String
    name        String
    description String
    category    String
    brand       String
    selectedImg Image
    quantity    Int
    price       Float
}

type Image {
    color     String
    colorCode String
    image     String
}

type Address {
    city        String
    country     String
    line1       String
    line2       String?
    postal_code String
    state       String
}

enum Role {
    USER
    ADMIN
}

// model Session {
//   id           String   @id @default(auto()) @map("_id") @db.ObjectId
//   sessionToken String   @unique
//   userId       String   @db.ObjectId
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
